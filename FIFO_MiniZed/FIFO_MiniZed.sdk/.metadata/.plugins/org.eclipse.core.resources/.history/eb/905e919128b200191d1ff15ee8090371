/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

	// WARNING!!!!
	// Define the byte-length of this FIFO here, allowable numbers, 1, 2, 4, indicating 1-byte, 2-byte or 4-byte width of the FIFO, respectively.
#define FIFO_WIDTH 1

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "ps7_init.h"
#include "xparameters.h"
#include "xil_io.h"
#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
#include <stdbool.h>
#define FIFO_CAPACITY (XPAR_AXI_BRAM_CTRL_0_S_AXI_HIGHADDR - XPAR_AXI_BRAM_CTRL_0_S_AXI_BASEADDR)				// in bytes

/* queue memory (BRAM) is already created in Vivado. So, we only need to implement read/write capabilities and checking the status signals */

volatile unsigned int rd_pointer_addr = 0;
volatile unsigned int wr_pointer_addr = 0;
volatile unsigned int next_wr_addr = 1;
bool o_full = false;						// initially the FIFO is NOT full
bool o_empty = true;						// initially the FIFO is empty
bool o_error = false;						// initially the FIFO is NOT in an error state

// computes the next write address pointer. Similar to the PL_LUT or PL_BRAM versions of this FIFO, we implement a wrap-around memory structure,
// where we continue writing to the beginning of the FIFO when we hit the end of it (provided, they are empty).
unsigned int compute_next_wr_addr(unsigned int current_wr_pointer_addr) {
	return ((current_wr_pointer_addr + 1) == (FIFO_CAPACITY-1)) ? 0 : current_wr_pointer_addr + 1;
}

// computes if the FIFO is full, i.e. (FIFO_CAPACITY - 1) memory cells are written, considering an 8-bit FIFO
bool compute_o_full () {
	return next_wr_addr == rd_pointer_addr;
}

bool compute_o_empty () {
	return wr_pointer_addr == rd_pointer_addr;
}

// resets the entire FIFO to the initial state
void reset_FIFO (){
	rd_pointer_addr = 0;
	wr_pointer_addr = 0;
	next_wr_addr = 1;
	o_full = false;
	o_empty = true;
	o_error = false;
}


void write_to_FIFO( i_data){
	if(!(compute_o_full ())){
		// the writing port is used here.
		if(FIFO_WIDTH == 1) {
			Xil_Out8(XPAR_AXI_BRAM_CTRL_0_S_AXI_BASEADDR + wr_pointer_addr, i_data);
		} else if (FIFO_WIDTH = 2) {
			Xil_Out16(XPAR_AXI_BRAM_CTRL_0_S_AXI_BASEADDR + 2*wr_pointer_addr, i_data);
		} else if (FIFO_WIDTH = 4) {
			Xil_Out32(XPAR_AXI_BRAM_CTRL_0_S_AXI_BASEADDR + 4*wr_pointer_addr, i_data);
		}

		// increment the write pointer
		wr_pointer_addr += 1;

		// compute the next write address and status signals
		compute_next_wr_addr();
		compute_o_full();
		compute_o_empty();
	} else if (compute_o_full ()) {
		// assert the error signal
		o_error = true;
		xil_printf("An error occurred while writing to the FIFO. Please reset the FIFO.");
	}
}


void read_from_FIFO(){

	if( !(compute_o_empty ()) ) {
		if(FIFO_WIDTH == 1) {
			Xil_In8(XPAR_AXI_BRAM_CTRL_1_S_AXI_BASEADDR + wr_pointer_addr);
		} else if (FIFO_WIDTH = 2) {
			Xil_In16(XPAR_AXI_BRAM_CTRL_1_S_AXI_BASEADDR + 2*wr_pointer_addr);
		} else if (FIFO_WIDTH = 4) {
			Xil_In32(XPAR_AXI_BRAM_CTRL_1_S_AXI_BASEADDR + 4*wr_pointer_addr);
		}
	}






	Xil_In32(XPAR_AXI_BRAM_CTRL_1_S_AXI_BASEADDR + i*4)
}

int main()
{
    init_platform();

    ps7_post_config();

    int i;

    xil_printf("Hello World\n\r");

    for(i = 0; i < 10; i++)
    	Xil_Out32(XPAR_AXI_BRAM_CTRL_0_S_AXI_BASEADDR + 4*i, i + 0xaabbccdd);

    for(i = 0; i < 10; i++)
        	xil_printf("value at address %x is %x\n\r", XPAR_AXI_BRAM_CTRL_1_S_AXI_BASEADDR + i*4, Xil_In32(XPAR_AXI_BRAM_CTRL_1_S_AXI_BASEADDR + i*4));

    cleanup_platform();
    return 0;
}
